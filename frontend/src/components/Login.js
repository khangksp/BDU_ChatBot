import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Login.css';

import { API_BASE_URL } from '../config.js';

const Login = ({ onLoginSuccess }) => {
    const [formData, setFormData] = useState({
        faculty_code: '',
        password: '',
        remember_me: false
    });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [connectionStatus, setConnectionStatus] = useState('checking');
    const [showForgotPassword, setShowForgotPassword] = useState(false);
    
    // Forgot password form
    const [forgotPasswordData, setForgotPasswordData] = useState({
        faculty_code: '',
        email: ''
    });
    const [forgotPasswordLoading, setForgotPasswordLoading] = useState(false);
    const [forgotPasswordMessage, setForgotPasswordMessage] = useState('');

    useEffect(() => {
        // Test connection khi component mount
        testConnection();
        // Check if already logged in
        checkAuthStatus();
    }, []);

    const testConnection = async () => {
        try {
            await axios.get(`${API_BASE_URL}/api/health/`);
            setConnectionStatus('connected');
        } catch (error) {
            console.error('Connection test failed:', error);
            setConnectionStatus('error');
            setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng.');
        }
    };

    const checkAuthStatus = async () => {
        try {
            const response = await axios.get(`${API_BASE_URL}/api/auth/status/`);
            if (response.data.authenticated) {
                onLoginSuccess(response.data.user);
            }
        } catch (error) {
            console.log('Not authenticated');
        }
    };

    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;

        let processedValue = value;
        if (name === 'faculty_code') {
            processedValue = value.toUpperCase();
        }

        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : processedValue
        }));
        // Clear error when user starts typing
        if (error) setError('');
    };

    const handleForgotPasswordChange = (e) => {
        const { name, value } = e.target;
        
        // Ch·ªâ uppercase faculty_code
        let processedValue = value;
        if (name === 'faculty_code') {
            processedValue = value.toUpperCase();
        }
        
        setForgotPasswordData(prev => ({
            ...prev,
            [name]: processedValue
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (!formData.faculty_code.trim() || !formData.password.trim()) {
            setError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ gi·∫£ng vi√™n v√† m·∫≠t kh·∫©u');
            return;
        }

        setLoading(true);
        setError('');

        try {
            const response = await axios.post(`${API_BASE_URL}/api/auth/login/`, {
                faculty_code: formData.faculty_code.trim(),
                password: formData.password,
                remember_me: formData.remember_me
            });

            if (response.data.success) {
                // Store token
                localStorage.setItem('auth_token', response.data.data.token);
                localStorage.setItem('user_data', JSON.stringify(response.data.data.user));
                
                // Set axios default header
                axios.defaults.headers.common['Authorization'] = `Token ${response.data.data.token}`;
                
                // Call success callback
                onLoginSuccess(response.data.data.user);
            } else {
                setError(response.data.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('Login error:', error);
            
            if (error.response?.data?.message) {
                setError(error.response.data.message);
            } else if (error.response?.status === 401) {
                setError('M√£ gi·∫£ng vi√™n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
            } else if (error.code === 'ECONNABORTED') {
                setError('Timeout: Server m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi');
            } else {
                setError('L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        } finally {
            setLoading(false);
        }
    };

    const handleForgotPassword = async (e) => {
        e.preventDefault();
        
        if (!forgotPasswordData.faculty_code.trim() || !forgotPasswordData.email.trim()) {
            setForgotPasswordMessage('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ gi·∫£ng vi√™n v√† email');
            return;
        }

        setForgotPasswordLoading(true);
        setForgotPasswordMessage('');

        try {
            const response = await axios.post(`${API_BASE_URL}/api/auth/password/reset/request/`, {
                faculty_code: forgotPasswordData.faculty_code.trim(),
                email: forgotPasswordData.email.trim()
            });

            if (response.data.success) {
                setForgotPasswordMessage(
                    `‚úÖ ${response.data.message}${response.data.debug_info ? 
                    `\n\nüîß Debug info:\nToken: ${response.data.debug_info.token}\nH·∫øt h·∫°n: ${new Date(response.data.debug_info.expires_at).toLocaleString('vi-VN')}` : ''}`
                );
                
                // Reset form
                setForgotPasswordData({ faculty_code: '', email: '' });
            } else {
                setForgotPasswordMessage(`‚ùå ${response.data.message}`);
            }
        } catch (error) {
            console.error('Forgot password error:', error);
            setForgotPasswordMessage('‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu reset password. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setForgotPasswordLoading(false);
        }
    };

    const retryConnection = () => {
        setConnectionStatus('checking');
        setError('');
        testConnection();
    };

    if (connectionStatus === 'checking') {
        return (
            <div className="login-container">
                <div className="login-box">
                    <div className="connection-checking">
                        <div className="spinner"></div>
                        <h3>üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn server...</h3>
                        <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                    </div>
                </div>
            </div>
        );
    }

    if (connectionStatus === 'error') {
        return (
            <div className="login-container">
                <div className="login-box">
                    <div className="connection-error">
                        <h3>üî¥ L·ªói k·∫øt n·ªëi server</h3>
                        <p>{error}</p>
                        <div className="error-help">
                            <h4>H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:</h4>
                            <ol>
                                <li>Ki·ªÉm tra server Django ƒëang ch·∫°y: <code>python manage.py runserver</code></li>
                                <li>Ki·ªÉm tra URL: <code>http://127.0.0.1:8000/api/health/</code></li>
                                <li>Ki·ªÉm tra CORS settings trong Django</li>
                            </ol>
                        </div>
                        <button onClick={retryConnection} className="retry-btn">
                            üîÑ Th·ª≠ l·∫°i
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="login-container">
            <div className="login-header">
                <h1>üéì Chatbot ƒê·∫°i h·ªçc B√¨nh D∆∞∆°ng</h1>
                <p>H·ªá th·ªëng h·ªó tr·ª£ th√¥ng tin tuy·ªÉn sinh v√† ƒë√†o t·∫°o</p>
            </div>

            <div className="login-box">
                {!showForgotPassword ? (
                    <>
                        <div className="login-form-header">
                            <h2>üîê ƒêƒÉng nh·∫≠p</h2>
                            <p>D√†nh cho c√°n b·ªô, gi·∫£ng vi√™n</p>
                        </div>

                        <form onSubmit={handleSubmit} className="login-form">
                            {error && (
                                <div className="error-message">
                                    ‚ö†Ô∏è {error}
                                </div>
                            )}

                            <div className="form-group">
                                <label htmlFor="faculty_code">üë§ M√£ gi·∫£ng vi√™n</label>
                                <input
                                    type="text"
                                    id="faculty_code"
                                    name="faculty_code"
                                    value={formData.faculty_code}
                                    onChange={handleInputChange}
                                    placeholder="VD: GV001, ADMIN001"
                                    maxLength={20}
                                    autoComplete="username"
                                    disabled={loading}
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="password">üîë M·∫≠t kh·∫©u</label>
                                <div className="password-input-wrapper">
                                    <input
                                        type={showPassword ? "text" : "password"}
                                        id="password"
                                        name="password"
                                        value={formData.password}
                                        onChange={handleInputChange}
                                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                                        autoComplete="current-password"
                                        disabled={loading}
                                    />
                                    <button
                                        type="button"
                                        className="password-toggle"
                                        onClick={() => setShowPassword(!showPassword)}
                                        disabled={loading}
                                    >
                                        {showPassword ? 'üôà' : 'üëÅÔ∏è'}
                                    </button>
                                </div>
                            </div>

                            <div className="form-options">
                                <label className="checkbox-label">
                                    <input
                                        type="checkbox"
                                        name="remember_me"
                                        checked={formData.remember_me}
                                        onChange={handleInputChange}
                                        disabled={loading}
                                    />
                                    <span>üîÑ Ghi nh·ªõ ƒëƒÉng nh·∫≠p (2 tu·∫ßn)</span>
                                </label>

                                <button
                                    type="button"
                                    className="forgot-password-link"
                                    onClick={() => setShowForgotPassword(true)}
                                    disabled={loading}
                                >
                                    üîë Qu√™n m·∫≠t kh·∫©u?
                                </button>
                            </div>

                            <button
                                type="submit"
                                className="login-btn"
                                disabled={loading || !formData.faculty_code.trim() || !formData.password.trim()}
                            >
                                {loading ? '‚è≥ ƒêang ƒëƒÉng nh·∫≠p...' : 'üö™ ƒêƒÉng nh·∫≠p'}
                            </button>
                        </form>

                        <div className="login-help">
                            <h4>üí° T√†i kho·∫£n m·∫´u ƒë·ªÉ test:</h4>
                            <div className="sample-accounts">
                                <div className="sample-account">
                                    <strong>ADMIN001</strong> / admin123456 (Qu·∫£n tr·ªã)
                                </div>
                                <div className="sample-account">
                                    <strong>GV001</strong> / gv001@2024 (Gi·∫£ng vi√™n)
                                </div>
                                <div className="sample-account">
                                    <strong>TEST</strong> / 123456 (Test)
                                </div>
                            </div>
                        </div>
                    </>
                ) : (
                    <>
                        <div className="login-form-header">
                            <h2>üîë Qu√™n m·∫≠t kh·∫©u</h2>
                            <p>Nh·∫≠p th√¥ng tin ƒë·ªÉ reset m·∫≠t kh·∫©u</p>
                        </div>

                        <form onSubmit={handleForgotPassword} className="login-form">
                            {forgotPasswordMessage && (
                                <div className={`message ${forgotPasswordMessage.includes('‚úÖ') ? 'success' : 'error'}`}>
                                    <pre>{forgotPasswordMessage}</pre>
                                </div>
                            )}

                            <div className="form-group">
                                <label htmlFor="forgot_faculty_code">üë§ M√£ gi·∫£ng vi√™n</label>
                                <input
                                    type="text"
                                    id="forgot_faculty_code"
                                    name="faculty_code"
                                    value={forgotPasswordData.faculty_code}
                                    onChange={handleForgotPasswordChange}
                                    placeholder="VD: GV001"
                                    maxLength={20}
                                    disabled={forgotPasswordLoading}
                                />
                            </div>

                            <div className="form-group">
                                <label htmlFor="forgot_email">üìß Email ƒëƒÉng k√Ω</label>
                                <input
                                    type="email"
                                    id="forgot_email"
                                    name="email"
                                    value={forgotPasswordData.email}
                                    onChange={handleForgotPasswordChange}
                                    placeholder="email@bdu.edu.vn"
                                    disabled={forgotPasswordLoading}
                                />
                            </div>

                            <div className="form-actions">
                                <button
                                    type="button"
                                    className="back-btn"
                                    onClick={() => {
                                        setShowForgotPassword(false);
                                        setForgotPasswordMessage('');
                                        setForgotPasswordData({ faculty_code: '', email: '' });
                                    }}
                                    disabled={forgotPasswordLoading}
                                >
                                    ‚Üê Quay l·∫°i ƒëƒÉng nh·∫≠p
                                </button>

                                <button
                                    type="submit"
                                    className="submit-btn"
                                    disabled={forgotPasswordLoading || !forgotPasswordData.faculty_code.trim() || !forgotPasswordData.email.trim()}
                                >
                                    {forgotPasswordLoading ? '‚è≥ ƒêang g·ª≠i...' : 'üì® G·ª≠i y√™u c·∫ßu'}
                                </button>
                            </div>
                        </form>
                    </>
                )}
            </div>

            <div className="login-footer">
                <div className="footer-info">
                    <span>ü§ñ Powered by AI ‚Ä¢ PhoBERT + Whisper + FAISS</span>
                    <span>Made with ‚ù§Ô∏è for ƒê·∫°i h·ªçc B√¨nh D∆∞∆°ng</span>
                </div>
                <div className="debug-info">
                    Backend: {API_BASE_URL} | Status: {connectionStatus}
                </div>
            </div>
        </div>
    );
};

export default Login;