from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils import timezone
import uuid

class Faculty(AbstractUser):
    """
    Custom User model cho gi·∫£ng vi√™n
    Extends AbstractUser ƒë·ªÉ d·ªÖ customize sau n√†y
    """
    
    # ‚úÖ TH√äM: Choices cho department v√† position
    DEPARTMENT_CHOICES = [
        ('cntt', 'C√¥ng ngh·ªá th√¥ng tin'),
        ('duoc', 'D∆∞·ª£c'),
        ('dien_tu', 'ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng'),
        ('co_khi', 'C∆° kh√≠'),
        ('kinh_te', 'Kinh t·∫ø'),
        ('luat', 'Lu·∫≠t'),
        ('y_khoa', 'Y khoa'),
        ('ngoai_ngu', 'Ngo·∫°i ng·ªØ'),
        ('xay_dung', 'X√¢y d·ª±ng'),
        ('quan_tri', 'Qu·∫£n tr·ªã kinh doanh'),
        ('ke_toan', 'K·∫ø to√°n'),
        ('marketing', 'Marketing'),
        ('tai_chinh', 'T√†i ch√≠nh ng√¢n h√†ng'),
        ('general', 'Chung (kh√¥ng chuy√™n ng√†nh)')
    ]
    
    POSITION_CHOICES = [
        ('giang_vien', 'Gi·∫£ng vi√™n'),
        ('tro_giang', 'Tr·ª£ gi·∫£ng'),
        ('truong_khoa', 'Tr∆∞·ªüng khoa'),
        ('pho_truong_khoa', 'Ph√≥ tr∆∞·ªüng khoa'),
        ('truong_bo_mon', 'Tr∆∞·ªüng b·ªô m√¥n'),
        ('can_bo', 'C√°n b·ªô'),
        ('admin', 'Qu·∫£n tr·ªã vi√™n')
    ]
    
    # Th√¥ng tin c∆° b·∫£n (gi·ªØ nguy√™n)
    faculty_code = models.CharField(
        max_length=20, 
        unique=True, 
        help_text="M√£ gi·∫£ng vi√™n (VD: GV001, BDU2024001)"
    )
    full_name = models.CharField(max_length=100, help_text="H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß")
    
    # ‚úÖ N√ÇNG C·∫§P: Thay ƒë·ªïi department th√†nh c√≥ choices
    department = models.CharField(
        max_length=20, 
        choices=DEPARTMENT_CHOICES, 
        default='general',
        help_text="Khoa/Ng√†nh chuy√™n m√¥n"
    )
    
    phone = models.CharField(max_length=15, blank=True)
    
    # ‚úÖ TH√äM: Th√¥ng tin vai tr√≤ v√† personalization
    position = models.CharField(
        max_length=20,
        choices=POSITION_CHOICES,
        default='giang_vien',
        verbose_name="Ch·ª©c v·ª•"
    )
    
    # ‚úÖ TH√äM: Th√¥ng tin chuy√™n m√¥n
    specialization = models.TextField(
        blank=True, 
        verbose_name="Chuy√™n m√¥n/Lƒ©nh v·ª±c nghi√™n c·ª©u"
    )
    office_room = models.CharField(
        max_length=20, 
        blank=True, 
        verbose_name="Ph√≤ng l√†m vi·ªác"
    )
    
    # ‚úÖ TH√äM: T√πy ch·ªçn chatbot c√° nh√¢n h√≥a
    chatbot_preferences = models.JSONField(
        default=dict,
        blank=True,
        verbose_name="T√πy ch·ªçn chatbot",
        help_text="L∆∞u c√°c t√πy ch·ªçn c√° nh√¢n h√≥a chatbot"
    )
    
    # Tr·∫°ng th√°i t√†i kho·∫£n (gi·ªØ nguy√™n)
    is_active_faculty = models.BooleanField(default=True, help_text="C√≥ ƒëang l√†m vi·ªác kh√¥ng")
    last_login_ip = models.GenericIPAddressField(null=True, blank=True)
    
    # Metadata (gi·ªØ nguy√™n)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    # Override username field (gi·ªØ nguy√™n)
    USERNAME_FIELD = 'faculty_code'
    REQUIRED_FIELDS = ['email', 'full_name']
    
    class Meta:
        db_table = 'faculty'
        verbose_name = 'Gi·∫£ng vi√™n'
        verbose_name_plural = 'Danh s√°ch gi·∫£ng vi√™n'
        
    def __str__(self):
        return f"{self.faculty_code} - {self.full_name} ({self.get_department_display()})"
    
    def save(self, *args, **kwargs):
        # Auto set username = faculty_code (gi·ªØ nguy√™n)
        self.username = self.faculty_code
        super().save(*args, **kwargs)
    
    # ‚úÖ TH√äM: C√°c method h·ªó tr·ª£ personalization
    def get_role_description(self):
        """L·∫•y m√¥ t·∫£ vai tr√≤ ƒë·∫ßy ƒë·ªß"""
        dept_name = self.get_department_display()
        pos_name = self.get_position_display()
        return f"{pos_name} {dept_name}"
    
    def get_chatbot_context(self):
        """L·∫•y context cho chatbot d·ª±a tr√™n vai tr√≤"""
        return {
            'user_id': self.id,
            'faculty_code': self.faculty_code,
            'full_name': self.full_name,
            'department': self.department,
            'department_name': self.get_department_display(),
            'position': self.position,
            'position_name': self.get_position_display(),
            'role_description': self.get_role_description(),
            'specialization': self.specialization,
            'office_room': self.office_room,
            'preferences': self.chatbot_preferences,
            'is_lecturer': self.position in ['giang_vien', 'tro_giang', 'truong_khoa', 'pho_truong_khoa', 'truong_bo_mon']
        }
    
    def update_chatbot_preferences(self, preferences_data):
        """C·∫≠p nh·∫≠t t√πy ch·ªçn chatbot"""
        if not self.chatbot_preferences:
            self.chatbot_preferences = {}
        
        self.chatbot_preferences.update(preferences_data)
        self.save(update_fields=['chatbot_preferences'])
    
    def get_personalized_system_prompt(self):
        """T·∫°o system prompt c√° nh√¢n h√≥a d·ª±a tr√™n vai tr√≤"""
        base_prompt = f"""B·∫°n l√† AI assistant chuy√™n nghi·ªáp c·ªßa ƒê·∫°i h·ªçc B√¨nh D∆∞∆°ng (BDU), ƒë∆∞·ª£c thi·∫øt k·∫ø ƒê·∫∂C BI·ªÜT ƒë·ªÉ h·ªó tr·ª£ {self.get_role_description()}.

üéØ TH√îNG TIN NG∆Ø·ªúI D√ôNG:
- M√£ GV: {self.faculty_code}
- H·ªç t√™n: {self.full_name}
- Vai tr√≤: {self.get_role_description()}
- Khoa/Ng√†nh: {self.get_department_display()}
- Chuy√™n m√¥n: {self.specialization or 'Chung'}
- Ph√≤ng l√†m vi·ªác: {self.office_room or 'Kh√¥ng x√°c ƒë·ªãnh'}

ü§ñ QUY T·∫ÆC VAI TR√í:
- LU√îN x∆∞ng h√¥: "th·∫ßy/c√¥ {self.full_name.split()[-1] if self.full_name else self.faculty_code}"
- ∆Øu ti√™n th√¥ng tin li√™n quan ƒë·∫øn ng√†nh {self.get_department_display()}
- T·∫≠p trung v√†o nhu c·∫ßu c·ªßa {self.get_position_display()}
- Cung c·∫•p th√¥ng tin chuy√™n s√¢u v·ªÅ {self.get_department_display()}

üéì CHUY√äN M√îN THEO NG√ÄNH:"""
        
        # Th√™m ki·∫øn th·ª©c chuy√™n ng√†nh
        department_knowledge = self._get_department_specific_knowledge()
        if department_knowledge:
            base_prompt += f"\n{department_knowledge}"
        
        base_prompt += f"""

‚úÖ QUY T·∫ÆC TR·∫¢ L·ªúI:
1. Lu√¥n b·∫Øt ƒë·∫ßu v·ªõi "D·∫° th·∫ßy/c√¥ {self.full_name.split()[-1] if self.full_name else self.faculty_code},"
2. ∆Øu ti√™n th√¥ng tin ph·ª•c v·ª• c√¥ng vi·ªác {self.get_position_display()}
3. T·∫≠p trung v√†o ng√†nh {self.get_department_display()}
4. S·ª≠ d·ª•ng thu·∫≠t ng·ªØ chuy√™n ng√†nh ph√π h·ª£p
5. K·∫øt th√∫c: "Th·∫ßy/c√¥ c·∫ßn h·ªó tr·ª£ th√™m g√¨ v·ªÅ {self.get_department_display()} kh√¥ng ·∫°?"

üö´ TR√ÅNH:
- Th√¥ng tin kh√¥ng li√™n quan ƒë·∫øn {self.get_department_display()}
- T∆∞ v·∫•n ngo√†i chuy√™n m√¥n
- Quy·∫øt ƒë·ªãnh thay cho l√£nh ƒë·∫°o tr∆∞·ªùng"""
        
        return base_prompt
    
    def _get_department_specific_knowledge(self):
        """L·∫•y ki·∫øn th·ª©c chuy√™n ng√†nh"""
        knowledge_map = {
            'cntt': """
- Ng√†nh CNTT: L·∫≠p tr√¨nh, C∆° s·ªü d·ªØ li·ªáu, M·∫°ng m√°y t√≠nh, AI/ML
- Ph√≤ng lab: Lab tin h·ªçc, Lab m·∫°ng, Lab ph·∫ßn m·ªÅm
- Thi·∫øt b·ªã: M√°y t√≠nh, Server, Thi·∫øt b·ªã m·∫°ng
- Nghi√™n c·ª©u: AI, IoT, Big Data, Cyber Security
- H·ª£p t√°c doanh nghi·ªáp: FPT, Viettel, VNPT""",
            
            'duoc': """
- Ng√†nh D∆∞·ª£c: D∆∞·ª£c l√Ω, H√≥a d∆∞·ª£c, D∆∞·ª£c ƒë·ªông h·ªçc
- Ph√≤ng lab: Lab h√≥a ph√¢n t√≠ch, Lab vi sinh, Lab d∆∞·ª£c l√Ω
- Thi·∫øt b·ªã: M√°y quang ph·ªï, M√°y s·∫Øc k√Ω, K√≠nh hi·ªÉn vi
- Th·ª±c h√†nh: B·ªánh vi·ªán, Nh√† thu·ªëc, C√¥ng ty d∆∞·ª£c
- Ch·ª©ng ch·ªâ: Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ D∆∞·ª£c sƒ©""",
            
            'dien_tu': """
- Ng√†nh ƒêi·ªán t·ª≠: M·∫°ch ƒëi·ªán t·ª≠, Vi x·ª≠ l√Ω, Truy·ªÅn th√¥ng
- Ph√≤ng lab: Lab ƒëi·ªán t·ª≠, Lab vi x·ª≠ l√Ω, Lab truy·ªÅn th√¥ng
- Thi·∫øt b·ªã: Oscilloscope, Function generator, Multimeter
- ·ª®ng d·ª•ng: IoT, Embedded system, Robotics
- Ng√†nh li√™n quan: T·ª± ƒë·ªông h√≥a, ƒêi·ªÅu khi·ªÉn""",
            
            'co_khi': """
- Ng√†nh C∆° kh√≠: Thi·∫øt k·∫ø m√°y, Gia c√¥ng, Nhi·ªát ƒë·ªông l·ª±c
- Ph√≤ng lab: Lab CAD/CAM, Lab gia c√¥ng, Lab ƒëo l∆∞·ªùng
- Thi·∫øt b·ªã: M√°y ti·ªán, M√°y phay, M√°y ƒëo CMM
- Ph·∫ßn m·ªÅm: AutoCAD, SolidWorks, Mastercam
- Th·ª±c t·∫≠p: Nh√† m√°y, X√≠ nghi·ªáp c∆° kh√≠""",
            
            'y_khoa': """
- Ng√†nh Y khoa: Gi·∫£i ph·∫´u, Sinh l√Ω, B·ªánh l√Ω, L√¢m s√†ng
- Ph√≤ng lab: Lab gi·∫£i ph·∫´u, Lab sinh l√Ω, Lab vi sinh
- Th·ª±c h√†nh: B·ªánh vi·ªán, Trung t√¢m y t·∫ø
- Ch·ª©ng ch·ªâ: B·∫±ng B√°c sƒ©, Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ
- Chuy√™n khoa: N·ªôi, Ngo·∫°i, S·∫£n, Nhi, M·∫Øt, RƒÉng H√†m M·∫∑t""",
            
            'kinh_te': """
- Ng√†nh Kinh t·∫ø: Vi m√¥, Vƒ© m√¥, Kinh t·∫ø l∆∞·ª£ng, T√†i ch√≠nh
- Ph·∫ßn m·ªÅm: Excel, SPSS, Stata, EViews
- Th·ª±c t·∫≠p: Ng√¢n h√†ng, C√¥ng ty t√†i ch√≠nh, Doanh nghi·ªáp
- Ch·ª©ng ch·ªâ: CFA, FRM, K·∫ø to√°n tr∆∞·ªüng
- Nghi√™n c·ª©u: Th·ªã tr∆∞·ªùng t√†i ch√≠nh, Ch√≠nh s√°ch kinh t·∫ø""",
            
            'luat': """
- Ng√†nh Lu·∫≠t: Lu·∫≠t d√¢n s·ª±, Lu·∫≠t h√¨nh s·ª±, Lu·∫≠t kinh t·∫ø
- Th·ª±c h√†nh: T√≤a √°n, VƒÉn ph√≤ng lu·∫≠t s∆∞, C√¥ng ty
- Ch·ª©ng ch·ªâ: Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ Lu·∫≠t s∆∞
- K·ªπ nƒÉng: Bi·ªán lu·∫≠n, So·∫°n th·∫£o h·ª£p ƒë·ªìng, T∆∞ v·∫•n ph√°p l√Ω
- Moot court: Phi√™n t√≤a gi·∫£ ƒë·ªãnh"""
        }
        
        return knowledge_map.get(self.department, "")


# ‚úÖ GI·ªÆ NGUY√äN: C√°c model kh√°c kh√¥ng thay ƒë·ªïi
class PasswordResetToken(models.Model):
    """
    Token ƒë·ªÉ reset password
    """
    faculty = models.ForeignKey(Faculty, on_delete=models.CASCADE)
    token = models.UUIDField(default=uuid.uuid4, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    used_at = models.DateTimeField(null=True, blank=True)
    expires_at = models.DateTimeField()
    
    class Meta:
        db_table = 'password_reset_tokens'
        
    def is_valid(self):
        """Ki·ªÉm tra token c√≥ c√≤n h·ª£p l·ªá kh√¥ng"""
        return (
            self.used_at is None and 
            timezone.now() < self.expires_at
        )
    
    def mark_as_used(self):
        """ƒê√°nh d·∫•u token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"""
        self.used_at = timezone.now()
        self.save()


class LoginAttempt(models.Model):
    """
    Theo d√µi c√°c l·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫£o m·∫≠t
    """
    faculty_code = models.CharField(max_length=20)
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField()
    success = models.BooleanField()
    attempt_time = models.DateTimeField(auto_now_add=True)
    failure_reason = models.CharField(max_length=100, blank=True)
    
    class Meta:
        db_table = 'login_attempts'
        indexes = [
            models.Index(fields=['faculty_code', 'attempt_time']),
            models.Index(fields=['ip_address', 'attempt_time']),
        ]